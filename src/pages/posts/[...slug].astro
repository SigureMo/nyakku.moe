---
import path from 'node:path'
import License from '@components/misc/License.astro'
import Markdown from '@components/misc/Markdown.astro'
import I18nKey from '@i18n/i18nKey'
import { i18n } from '@i18n/translation'
import MainGridLayout from '@layouts/MainGridLayout.astro'
import { getSortedPosts } from '@utils/content-utils'
import { getDir, getPostUrlBySlug } from '@utils/url-utils'
import { Icon } from 'astro-icon/components'
import { licenseConfig } from 'src/config'
import ImageWrapper from '../../components/misc/ImageWrapper.astro'
import PostMetadata from '../../components/PostMeta.astro'
import { profileConfig, siteConfig } from '../../config'
import { formatDateToYYYYMMDD } from '../../utils/date-utils'

export async function getStaticPaths() {
  const blogEntries = await getSortedPosts()
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { Content, headings } = await entry.render()

const { remarkPluginFrontmatter } = await entry.render()

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: entry.data.title,
  description: entry.data.description || entry.data.title,
  keywords: entry.data.tags,
  author: {
    '@type': 'Person',
    name: profileConfig.name,
    url: Astro.site,
  },
  datePublished: formatDateToYYYYMMDD(entry.data.published),
  inLanguage: entry.data.lang
    ? entry.data.lang.replace('_', '-')
    : siteConfig.lang.replace('_', '-'),
  // TODO include cover image here
}
---

<MainGridLayout
  banner={entry.data.image}
  title={entry.data.title}
  description={entry.data.description}
  lang={entry.data.lang}
  setOGTypeArticle={true}
  headings={headings}
>
  <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
  <div class="relative mb-4 flex w-full overflow-hidden rounded-[var(--radius-large)]">
    <div
      id="post-container"
      class:list={['card-base relative z-10 w-full px-6 pb-4 pt-6 md:px-9', {}]}
    >
      <!-- word count and reading time -->
      <div
        class="onload-animation mb-3 flex flex-row gap-5 text-black/30 transition dark:text-white/30"
      >
        <div class="flex flex-row items-center">
          <div
            class="mr-2 flex h-6 w-6 items-center justify-center rounded-md bg-black/5 text-black/50 transition dark:bg-white/10 dark:text-white/50"
          >
            <Icon name="material-symbols:notes-rounded" />
          </div>
          <div class="text-sm">
            {remarkPluginFrontmatter.words}
            {' ' + i18n(I18nKey.wordsCount)}
          </div>
        </div>
        <div class="flex flex-row items-center">
          <div
            class="mr-2 flex h-6 w-6 items-center justify-center rounded-md bg-black/5 text-black/50 transition dark:bg-white/10 dark:text-white/50"
          >
            <Icon name="material-symbols:schedule-outline-rounded" />
          </div>
          <div class="text-sm">
            {remarkPluginFrontmatter.minutes}
            {
              ' ' +
                i18n(
                  remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount
                )
            }
          </div>
        </div>
      </div>

      <!-- title -->
      <div class="onload-animation relative">
        <div
          data-pagefind-body
          data-pagefind-weight="10"
          data-pagefind-meta="title"
          class="mb-3 block w-full text-3xl font-bold text-black/90 transition before:absolute before:left-[-1.125rem] before:top-[0.75rem] before:h-5 before:rounded-md before:bg-[var(--primary)] dark:text-white/90 md:text-[2.25rem]/[2.75rem] md:before:w-1"
        >
          {entry.data.title}
        </div>
      </div>

      <!-- metadata -->
      <div class="onload-animation">
        <PostMetadata
          class="mb-5"
          published={entry.data.published}
          updated={entry.data.updated}
          tags={entry.data.tags}
          category={entry.data.category}
        />
        {
          !entry.data.image && (
            <div class="mb-5 border-b-[1px] border-dashed border-[var(--line-divider)]" />
          )
        }
      </div>

      <!-- always show cover as long as it has one -->

      {
        entry.data.image && (
          <ImageWrapper
            id="post-cover"
            src={entry.data.image}
            basePath={path.join('content/posts/', getDir(entry.id))}
            class="banner-container onload-animation mb-8 rounded-xl"
          />
        )
      }

      <Markdown class="markdown-content onload-animation mb-6">
        <Content />
      </Markdown>

      {
        licenseConfig.enable && (
          <License
            title={entry.data.title}
            slug={entry.slug}
            pubDate={entry.data.published}
            class="license-container onload-animation mb-6 rounded-xl"
          />
        )
      }
    </div>
  </div>

  <div class="mb-4 flex w-full flex-col justify-between gap-4 overflow-hidden md:flex-row">
    <a
      href={entry.data.nextSlug ? getPostUrlBySlug(entry.data.nextSlug) : '#'}
      class:list={[
        'w-full overflow-hidden font-bold active:scale-95',
        { 'pointer-events-none': !entry.data.nextSlug },
      ]}
    >
      {
        entry.data.nextSlug && (
          <div class="btn-card flex h-[3.75rem] w-full max-w-full items-center !justify-start gap-4 rounded-2xl px-4">
            <Icon
              name="material-symbols:chevron-left-rounded"
              class="text-[2rem] text-[var(--primary)]"
            />
            <div class="max-w-[calc(100%_-_3rem)] overflow-hidden overflow-ellipsis whitespace-nowrap text-black/75 transition dark:text-white/75">
              {entry.data.nextTitle}
            </div>
          </div>
        )
      }
    </a>

    <a
      href={entry.data.prevSlug ? getPostUrlBySlug(entry.data.prevSlug) : '#'}
      class:list={[
        'w-full overflow-hidden font-bold active:scale-95',
        { 'pointer-events-none': !entry.data.prevSlug },
      ]}
    >
      {
        entry.data.prevSlug && (
          <div class="btn-card flex h-[3.75rem] w-full max-w-full items-center !justify-end gap-4 rounded-2xl px-4">
            <div class="max-w-[calc(100%_-_3rem)] overflow-hidden overflow-ellipsis whitespace-nowrap text-black/75 transition dark:text-white/75">
              {entry.data.prevTitle}
            </div>
            <Icon
              name="material-symbols:chevron-right-rounded"
              class="text-[2rem] text-[var(--primary)]"
            />
          </div>
        )
      }
    </a>
  </div>
</MainGridLayout>
