---
import { Icon } from 'astro-icon/components'
import I18nKey from '../../i18n/i18nKey'
import { i18n } from '../../i18n/translation'

interface Props {
  id: string
  name?: string
  isCollapsed?: boolean
  collapsedHeight?: string
  class?: string
  style?: string
}
const { id, name, isCollapsed, collapsedHeight, style } = Astro.props
const className = Astro.props.class
---

<widget-layout
  data-id={id}
  data-is-collapsed={String(isCollapsed)}
  class={'pb-4 card-base ' + className}
  style={style}
>
  <div
    class="relative mt-4 mb-2 ml-8 text-lg font-bold text-neutral-900 transition before:absolute before:top-[5.5px] before:left-[-16px] before:h-4 before:w-1 before:rounded-md before:bg-[var(--primary)] dark:text-neutral-100"
  >
    {name}
  </div>
  <div id={id} class:list={['collapse-wrapper overflow-hidden px-4', { collapsed: isCollapsed }]}>
    <slot />
  </div>
  {
    isCollapsed && (
      <div class="expand-btn -mb-2 px-4">
        <button class="btn-plain h-9 w-full rounded-lg">
          <div class="flex -translate-x-2 items-center justify-center gap-2 text-[var(--primary)]">
            <Icon name="material-symbols:more-horiz" class="text-[1.75rem]" /> {i18n(I18nKey.more)}
          </div>
        </button>
      </div>
    )
  }
</widget-layout>

<style define:vars={{ collapsedHeight }}>
  .collapsed {
    height: var(--collapsedHeight);
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super()

      if (this.dataset.isCollapsed !== 'true') return

      const id = this.dataset.id
      const btn = this.querySelector('.expand-btn')
      const wrapper = this.querySelector(`#${id}`)
      btn!.addEventListener('click', () => {
        wrapper!.classList.remove('collapsed')
        btn!.classList.add('hidden')
      })
    }
  }

  if (!customElements.get('widget-layout')) {
    customElements.define('widget-layout', WidgetLayout)
  }
</script>
