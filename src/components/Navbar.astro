---
import { Icon } from 'astro-icon/components'
import { navBarConfig, siteConfig } from '../config'
import { LinkPresets } from '../constants/link-presets'
import { LinkPreset, type NavBarLink } from '../types/config'
import { url } from '../utils/url-utils'
import LightDarkSwitch from './LightDarkSwitch.svelte'
import Search from './Search.svelte'
import DisplaySettings from './widget/DisplaySettings.svelte'
import NavMenuPanel from './widget/NavMenuPanel.astro'

const className = Astro.props.class

let links: NavBarLink[] = navBarConfig.links.map((item: NavBarLink | LinkPreset): NavBarLink => {
  if (typeof item === 'number') {
    return LinkPresets[item]
  }
  return item
})
---

<div id="navbar" class="onload-animation z-50">
  <div class="absolute -top-8 left-0 right-0 h-8 bg-[var(--card-bg)] transition"></div>
  <!-- used for onload animation -->
  <div
    class:list={[
      className,
      'card-base mx-auto flex h-[4.5rem] max-w-[var(--page-width)] items-center justify-between !overflow-visible !rounded-t-none px-4',
    ]}
  >
    <a
      href={url('/')}
      class="btn-plain scale-animation h-[3.25rem] rounded-lg px-5 font-bold active:scale-95"
    >
      <div class="text-md flex flex-row items-center text-[var(--primary)]">
        <Icon name="material-symbols:home-outline-rounded" class="mb-1 mr-2 text-[1.75rem]" />
        {siteConfig.title}
      </div>
    </a>
    <div class="hidden md:flex">
      {
        links.map((l) => {
          return (
            <a
              aria-label={l.name}
              href={l.external ? l.url : url(l.url)}
              target={l.external ? '_blank' : null}
              class="btn-plain scale-animation h-11 rounded-lg px-5 font-bold active:scale-95"
            >
              <div class="flex items-center">
                {l.name}
                {l.external && (
                  <Icon
                    name="fa6-solid:arrow-up-right-from-square"
                    class="ml-1 -translate-y-[1px] text-[0.875rem] text-black/[0.2] transition dark:text-white/[0.2]"
                  />
                )}
              </div>
            </a>
          )
        })
      }
    </div>
    <div class="flex">
      <!--<SearchPanel client:load>-->
      <Search client:only="svelte" />
      {
        !siteConfig.themeColor.fixed && (
          <button
            aria-label="Display Settings"
            class="btn-plain scale-animation h-11 w-11 rounded-lg active:scale-90"
            id="display-settings-switch"
          >
            <Icon name="material-symbols:palette-outline" class="text-[1.25rem]" />
          </button>
        )
      }
      <LightDarkSwitch client:only="svelte" />
      <button
        aria-label="Menu"
        name="Nav Menu"
        class="btn-plain scale-animation h-11 w-11 rounded-lg active:scale-90 md:!hidden"
        id="nav-menu-switch"
      >
        <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]" />
      </button>
    </div>
    <NavMenuPanel links={links} />
    <DisplaySettings client:only="svelte" />
  </div>
</div>

<script>
  function switchTheme() {
    if (localStorage.theme === 'dark') {
      document.documentElement.classList.remove('dark')
      localStorage.theme = 'light'
    } else {
      document.documentElement.classList.add('dark')
      localStorage.theme = 'dark'
    }
  }

  function loadButtonScript() {
    let switchBtn = document.getElementById('scheme-switch')
    if (switchBtn) {
      switchBtn.onclick = function () {
        switchTheme()
      }
    }

    let settingBtn = document.getElementById('display-settings-switch')
    if (settingBtn) {
      settingBtn.onclick = function () {
        let settingPanel = document.getElementById('display-setting')
        if (settingPanel) {
          settingPanel.classList.toggle('float-panel-closed')
        }
      }
    }

    let menuBtn = document.getElementById('nav-menu-switch')
    if (menuBtn) {
      menuBtn.onclick = function () {
        let menuPanel = document.getElementById('nav-menu-panel')
        if (menuPanel) {
          menuPanel.classList.toggle('float-panel-closed')
        }
      }
    }
  }

  loadButtonScript()
</script>

<script
  is:inline
  define:vars={{ scriptUrl: url('/pagefind/pagefind.js'), isProd: import.meta.env.PROD }}
>
  if (isProd) {
    async function loadPagefind() {
      try {
        const response = await fetch(scriptUrl, { method: 'HEAD' })
        if (!response.ok) {
          throw new Error(`Pagefind script not found: ${response.status}`)
        }

        const pagefind = await import(scriptUrl)

        await pagefind.options({
          excerptLength: 20,
        })

        window.pagefind = pagefind

        document.dispatchEvent(new CustomEvent('pagefindready'))
        console.log('Pagefind loaded and initialized successfully, event dispatched.')
      } catch (error) {
        console.error('Failed to load Pagefind:', error)
        window.pagefind = {
          search: () => Promise.resolve({ results: [] }),
          options: () => Promise.resolve(),
        }
        document.dispatchEvent(new CustomEvent('pagefindloaderror'))
        console.log('Pagefind load error, event dispatched.')
      }
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadPagefind)
    } else {
      loadPagefind()
    }
  }
</script>
